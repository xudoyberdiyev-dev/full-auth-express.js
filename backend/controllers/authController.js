import bcrypt from 'bcryptjs';  // ðŸ”¹ Parolni hash qilish va tekshirish uchun 'bcryptjs' moduli chaqirilmoqda
import jwt from 'jsonwebtoken';  // ðŸ”¹ Foydalanuvchini autentifikatsiya qilish uchun JWT token yaratish va tekshirish uchun modul
import userModel from '../model/userModel.js';  // ðŸ”¹ Mongoose orqali foydalanuvchi modeli chaqirilmoqda
import transporter from '../config/nodemailer.js';

// ========================== Foydalanuvchini roâ€˜yxatdan oâ€˜tkazish ==========================
export const register = async (req, res) => {  // ðŸ”¹ "register" funksiyasi e'lon qilinmoqda (async - asinxron)
    const { name, email, password } = req.body;  // ðŸ”¹ Foydalanuvchidan kelgan ma'lumotlar olinmoqda

    // ðŸ”¹ Agar foydalanuvchi barcha maydonlarni toâ€˜ldirmagan boâ€˜lsa, xatolik qaytariladi
    if (!name || !email || !password) {
        return res.json({ success: false, message: 'Iltimos, maÊ¼lumotni toâ€˜liq kiriting' });
    }

    try {
        const existEmail = await userModel.findOne({ email });  // ðŸ”¹ Berilgan email oldindan mavjudligini tekshirish

        if (existEmail) {  // ðŸ”¹ Agar email allaqachon roâ€˜yxatdan oâ€˜tgan boâ€˜lsa, xatolik chiqariladi
            return res.json({ success: false, message: "Bunday email avvaldan mavjud" });
        }

        const hashPassword = await bcrypt.hash(password, 10);  // ðŸ”¹ Parolni 10 ta iteratsiya bilan shifrlash

        const user = new userModel({ name, email, password: hashPassword });  // ðŸ”¹ Yangi foydalanuvchi obyektini yaratish
        await user.save();  // ðŸ”¹ Foydalanuvchini MongoDB'ga saqlash

        // ðŸ”¹ JWT token yaratish (ID orqali), 7 kun amal qiladi
        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '7d' });

        // ðŸ”¹ Tokenni cookie orqali yuborish
        res.cookie('token', token, {
            httpOnly: true,  // ðŸ”¹ Cookie faqat HTTP orqali oâ€˜qilishi mumkin (JavaScript orqali emas)
            secure: process.env.NODE_ENV === "production",  // ðŸ”¹ Agar production boâ€˜lsa, cookie faqat HTTPS orqali yuboriladi
            sameSite: process.env.NODE_ENV === "production" ? 'none' : 'strict',  
            maxAge: 7 * 24 * 60 * 60 * 1000  // ðŸ”¹ Cookie 7 kun davomida saqlanadi
        });

        const mailOptions={
            from:process.env.SENDER_EMAIL,
            to:email,
            subject:"Hush kelibsiz oka",
            text:`Hush kelibsiz bizning web sitemizga salom berdik akahon id:${email}`
        }

        await transporter.sendMail(mailOptions)

        res.json({ success: true, message: "Roâ€˜yxatdan oâ€˜tish muvaffaqiyatli" });  // ðŸ”¹ Javob qaytarish

    } catch (error) {
        res.status(500).json({ success: false, message: "Registerda xatolik" });  
    }
};

// ========================== Foydalanuvchini tizimga kirish (login) ==========================
export const login = async (req, res) => {
    const { email, password } = req.body;

    // ðŸ”¹ Agar foydalanuvchi barcha maydonlarni toâ€˜ldirmagan boâ€˜lsa, xatolik qaytariladi
    if (!email || !password) {
        return res.json({ success: false, message: 'Iltimos, maÊ¼lumotni toâ€˜liq kiriting' });
    }

    try {
        const user = await userModel.findOne({ email });  // ðŸ”¹ Email boâ€˜yicha foydalanuvchini qidirish

        if (!user) {  // ðŸ”¹ Agar foydalanuvchi mavjud boâ€˜lmasa, xatolik chiqariladi
            return res.json({ success: false, message: "Mavjud boâ€˜lmagan email" });
        }

        const isMatch = await bcrypt.compare(password, user.password);  // ðŸ”¹ Kiritilgan parolni tekshirish

        if (!isMatch) {  // ðŸ”¹ Agar parol notoâ€˜gâ€˜ri boâ€˜lsa, xatolik chiqariladi
            return res.json({ success: false, message: "Mavjud boâ€˜lmagan parol" });
        }

        // ðŸ”¹ JWT token yaratish (ID orqali), 7 kun amal qiladi
        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '7d' });

        // ðŸ”¹ Tokenni cookie orqali yuborish
        res.cookie('token', token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === "production",
            sameSite: process.env.NODE_ENV === "production" ? 'none' : 'strict',
            maxAge: 7 * 24 * 60 * 60 * 1000
        });

        res.json({ success: true, message: "Xisobga kirish muvaffaqiyatli" });  // ðŸ”¹ Javob qaytarish

    } catch (error) {
        res.status(500).json({ success: false, message: "Loginda xatolik" });  
    }
};

// ========================== Foydalanuvchini tizimdan chiqish (logout) ==========================
export const logout = async (req, res) => {
    try {
        res.clearCookie('token', {  // ðŸ”¹ Tokenni oâ€˜chirib tashlash
            httpOnly: true,
            secure: process.env.NODE_ENV === "production",
            sameSite: process.env.NODE_ENV === "production" ? 'none' : 'strict',
        });

        res.json({ success: true, message: "Xisobdan chiqdingiz" });  // ðŸ”¹ Javob qaytarish

    } catch (error) {
        res.status(500).json({ success: false, message: "Logoutda xatolik" });   
    }
};


export const sendVerifyOtp=async(req,res)=>{
    try{

        const {userId} =req.body;

        const user =await userModel.findById(userId)

        if(user.isAccountVerified){
            return res.json({success:false,message:"Account alradiy nmadurla"})
        }

        const opt =String(Math.floor(100000+Math.random()*900000))

        user.verifyOtp=opt;
        user.verifyOtpExpireAt=Date.now()+24*60*60*1000

        await user.save()

        const mailOptions={
            from:process.env.SENDER_EMAIL,
            to:user.email,
            subject:"Hush kelibsiz oka",
            text:`Hush kelibsiz bizning web sitemizga salom berdik akahon id:${opt}`
        }

        await transporter.sendMail(mailOptions)

        res.json({success:true,message:"Verifiy OPT sen email oka"})


    }catch(error){
        res.json({success:false,message:error.message})
    }
}